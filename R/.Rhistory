skel = mskf.model.skeleton(rnorm (100), 2, 3)
paH(mdl) = 1:2
paH(mdl) = diag(1:2)
debug("start<-.mskf.model")
start(mdl, "paH") = diag(-1:2/10)
i
names(value)
start.mskf.model = function(x, i) {#
	if (missing(i)) x$theta #
	else if (i %in% names(x$pattern)) {#
		nms = x$pattern[[i];#
		nms = as.character(unique(nms[nms != 0]));#
		x$theta[nms];#
	} #
	else #
		x$theta[i];#
}
start.mskf.model = function(x, i) {#
	if (missing(i)) {#
		x$theta;#
	}#
	else if (i %in% names(x$pattern)) {#
		nms = x$pattern[[i];#
		nms = as.character(unique(nms[nms != 0]));#
		x$theta[nms];#
	} #
	else #
		x$theta[i];#
}
start.mskf.model = function(x, i) {#
	if (missing(i)) {#
		x$theta;#
	}#
	else if (i %in% names(x$pattern)) {#
		nms = x$pattern[[i];#
		nms = as.character(unique(nms[nms != 0]));#
		x$theta[nms];#
	} #
	else x$theta[i];#
}
start.mskf.model = function(x, i) {#
	if (missing(i)) {#
		x$theta;#
	}#
	else if (i %in% names(x$pattern)) {#
		nms = x$pattern[[i]];#
		nms = as.character(unique(nms[nms != 0]));#
		x$theta[nms];#
	} #
	else x$theta[i];#
}
paH(mdl) = 2:3
paH(mdl) = diag(2:3)
nms
"start<-.mskf.model" = function(x, i, value) {#
	if (missing(i)) #
		if (!is.null(names(value))) #
			x$theta[names(value)] = value else x$theta[] = value #
		else  if (length(i)==1 & i %in% names(x$pattern)) {#
			# sapply(names(mdl$pattern), function(nm) {x = get(nm)(mdl); unique(x[x!=0])})#
			nms = x$pattern[[i]];#
			nms = as.character(unique(nms[nms != 0]));#
			nms = intersect(nms, names(value));#
			if (length(nms) > 0) {#
				x$theta[nms] = value[nms];#
			}#
			else stop('value [', value, '] should be a named vector with names', nms);#
		} else #
			x$theta[i] = value; #
	x;#
}
"start<-.mskf.model" = function(x, i, value) {#
	if (missing(i)) #
		if (!is.null(names(value))) #
			x$theta[names(value)] = value else x$theta[] = value #
		else  if (length(i)==1 & i %in% names(x$pattern)) {#
			# sapply(names(mdl$pattern), function(nm) {x = get(nm)(mdl); unique(x[x!=0])})#
			nms = x$pattern[[i]];#
			nms = as.character(unique(nms[nms != 0]));#
			if (is.null(names(value))) {#
				stop('value [', value, '] should be a vector of the form\n\tc(', paste('`',nms,'` =', sep=""),')');#
			}#
			nms = intersect(nms, names(value));#
			if (length(nms) > 0) {#
				x$theta[nms] = value[nms];#
			}#
		} else #
			x$theta[i] = value; #
	x;#
}
"start<-.mskf.model" = function(x, i, value) {#
	if (missing(i)) #
		if (!is.null(names(value))) #
			x$theta[names(value)] = value else x$theta[] = value #
		else  if (length(i)==1 & i %in% names(x$pattern)) {#
			# sapply(names(mdl$pattern), function(nm) {x = get(nm)(mdl); unique(x[x!=0])})#
			nms = x$pattern[[i]];#
			nms = as.character(unique(nms[nms != 0]));#
			if (is.null(names(value))) {#
				stop('value [', value, '] should be a vector of the form\n\tc(', paste('`',nms,'` = ..., ', sep=""),')');#
			}#
			nms = intersect(nms, names(value));#
			if (length(nms) > 0) {#
				x$theta[nms] = value[nms];#
			}#
		} else #
			x$theta[i] = value; #
	x;#
}
"start<-.mskf.model" = function(x, i, value) {#
	if (missing(i)) #
		if (!is.null(names(value))) #
			x$theta[names(value)] = value else x$theta[] = value #
		else  if (length(i)==1 & i %in% names(x$pattern)) {#
			# sapply(names(mdl$pattern), function(nm) {x = get(nm)(mdl); unique(x[x!=0])})#
			nms = x$pattern[[i]];#
			nms = as.character(unique(nms[nms != 0]));#
			if (is.null(names(value))) {#
				stop('value [', value, '] should be a vector of the form\n\tc(', paste('`',nms,'` = ...', sep="", collapse=", "),')');#
			}#
			nms = intersect(nms, names(value));#
			if (length(nms) > 0) {#
				x$theta[nms] = value[nms];#
			}#
		} else #
			x$theta[i] = value; #
	x;#
}
start(mdl, 'paH') = c(-1,-2)
start(mdl, 'paH') = c(`2`= -1,`3` = -2)
start(mdl, 'paH')
start.mskf.model = function(x, i) {#
	if (missing(i)) {#
		x$theta;#
	}#
	else if (i %in% names(x$pattern)) {#
		arr = x$pattern[[i]];#
		nms = as.character(unique(arr[arr != 0]));#
		x$theta[nms];#
		for (i in nms) arr[arr == i] = x$theta[i];#
		arr;#
	} #
	else x$theta[i];#
}
"start<-.mskf.model" = function(x, i, value) {#
	if (missing(i)) #
		if (!is.null(names(value))) #
			x$theta[names(value)] = value else x$theta[] = value #
		else  if (length(i)==1 & i %in% names(x$pattern)) {#
			# sapply(names(mdl$pattern), function(nm) {x = get(nm)(mdl); unique(x[x!=0])})#
			arr = x$pattern[[i]];#
			if (is.null(names(value))) {#
				if (!is.array(value) | !all.equal(dim(value), dim(arr))) #
					stop('value [', value, '] should be a vector of the form\n\tc(', paste('`',nms,'` = ...', sep="", collapse=", "),')');#
				else {#
					value = c(value);#
					names(value) = as.character(c(arr));#
					value = value[arr != 0];#
				}#
			}#
			nms = as.character(unique(arr[arr != 0]));#
			nms = intersect(nms, names(value));#
			if (length(nms) > 0) {#
				x$theta[nms] = value[nms];#
			}#
		} else #
			x$theta[i] = value; #
	x;#
}
"start<-.mskf.model" = function(x, i, value) {#
	if (missing(i)) #
		if (!is.null(names(value))) {#
			x$theta[names(value)] = value else x$theta[] = value;#
		}#
		else  if (length(i)==1 & i %in% names(x$pattern)) {#
			# sapply(names(mdl$pattern), function(nm) {x = get(nm)(mdl); unique(x[x!=0])})#
			arr = x$pattern[[i]];#
			if (is.null(names(value))) {#
				if (!is.array(value) | !all.equal(dim(value), dim(arr))) {#
					stop('value [', value, '] should be a vector of the form\n\tc(', paste('`',nms,'` = ...', sep="", collapse=", "),')');#
				}#
				else {#
					value = c(value);#
					names(value) = as.character(c(arr));#
					value = value[arr != 0];#
				}#
			}#
			nms = as.character(unique(arr[arr != 0]));#
			nms = intersect(nms, names(value));#
			if (length(nms) > 0) {#
				x$theta[nms] = value[nms];#
			}#
		} else #
			x$theta[i] = value; #
	x;#
}
"start<-.mskf.model" = function(x, i, value) {
	if (missing(i)) {
		if (!is.null(names(value))) {
			x$theta[names(value)] = value;
		else {
			x$theta[] = value;
		}
	}
	else if (length(i)==1 & i %in% names(x$pattern)) {
			# sapply(names(mdl$pattern), function(nm) {x = get(nm)(mdl); unique(x[x!=0])})
			arr = x$pattern[[i]];
			if (is.null(names(value))) {
				if (!is.array(value) | !all.equal(dim(value), dim(arr))) {
					stop('value [', value, '] should be a vector of the form\n\tc(', paste('`',nms,'` = ...', sep="", collapse=", "),')');
				else {
					value = c(value);
					names(value) = as.character(c(arr));
					value = value[arr != 0];
				}
			nms = as.character(unique(arr[arr != 0]));
			nms = intersect(nms, names(value));
			if (length(nms) > 0) {
				x$theta[nms] = value[nms];
			}
		} else
			x$theta[i] = value;
	x;
}
start(mdl,'paK')*10
start(mdl, 'paK') = start(mdl,'paK')*10
start(mdl,'paK')
start(mdl,'paH')
?names
source("/Users/rgrasma1/Dropbox/documents/shared/ellen shared/mskf/R/smkf-model-utilities.R")
start(mdl)
coef(mdl)
str(mdl)
plot.new(); plot.window(c (0,1), c (0,1))
circle = list(x = cos(seq(-1,1,len=40)*2*pi), y = sin(seq(-1,1,len=40)*2*pi)))
circle = list(x = cos(seq(-1,1,len=40)*2*pi), y = sin(seq(-1,1,len=40)*2*pi))
circle
plot(circle)
circle = list(x = cos(seq(0,1,len=40)*2*pi), y = sin(seq(0,1,len=40)*2*pi))
circle = function(radius) list(x = radius*cos(seq(0,1,len=40)*2*pi), y = radius*sin(seq(0,1,len=40)*2*pi))
plot(circle, type='l')
circle = function(radius,n=20) list(x = radius*cos(seq(0,1,len=n)*2*pi), y = radius*sin(seq(0,1,len=n)*2*pi))
plot(circle(.2), type='l')
plot(circle(.2,10), type='l')
plot(circle(.2,50), type='l')
r = persp(xlim=c(-1,1), ylim=c(-1,1), zlim=c(-1,1))
r = persp(matrix(NA,2,2),xlim=c(-1,1), ylim=c(-1,1), zlim=c(-1,1))
r = persp(matrix(NA,2,2),xlim=c(-1,1), ylim=c(-1,1), zlim=c(-1,1),box='n')
as.matrix(circle(.3))
as.matrix(as.data.frame(circle(.3)))
as.matrix(cbind(as.data.frame(circle(.3)),z=.8))
as.matrix(cbind(as.data.frame(circle(.3)),z=.8)) %*% r
r
as.matrix(cbind(1,as.data.frame(circle(.3)),z=.8)) %*% r
apply((as.matrix(cbind(1,as.data.frame(circle(.3)),z=.8)) %*% r)[,2:3],2, list)
lines(unlist(apply((as.matrix(cbind(1,as.data.frame(circle(.3)),z=.8)) %*% r)[,2:3],2, list),FALSE))
unlist(apply((as.matrix(cbind(1,as.data.frame(circle(.3)),z=.8)) %*% r)[,2:3],2, list),FALSE)
structure(unlist(apply((as.matrix(cbind(1,as.data.frame(circle(.3)),z=.8)) %*% r)[,2:3],2, list),FALSE),.Names=c('x','y'))
lines(structure(unlist(apply((as.matrix(cbind(1,as.data.frame(circle(.3)),z=.8)) %*% r)[,2:3],2, list),FALSE),.Names=c('x','y')))
lines(structure(unlist(apply((as.matrix(cbind(0,as.data.frame(circle(.3)),z=.8)) %*% r)[,2:3],2, list),FALSE),.Names=c('x','y')))
structure(unlist(apply((as.matrix(cbind(0,as.data.frame(circle(.3)),z=.8)) %*% r)[,2:3],2, list),FALSE),.Names=c('x','y'))
structure(unlist(apply((as.matrix(cbind(1,as.data.frame(circle(.3)),z=0)) %*% r)[,2:3],2, list),FALSE),.Names=c('x','y'))
lines(structure(unlist(apply((as.matrix(cbind(1,as.data.frame(circle(.3)),z=.0)) %*% r)[,2:3],2, list),FALSE),.Names=c('x','y')))
r = persp(matrix(NA,2,2),xlim=c(-1,1), ylim=c(-1,1), zlim=c(-1,1),phi=60)
r = persp(matrix(NA,2,2),xlim=c(-1,1), ylim=c(-1,1), zlim=c(-1,1),phi=40)
lines(structure(unlist(apply((as.matrix(cbind(1,as.data.frame(circle(.03)),z=.0)) %*% r)[,2:3],2, list),FALSE),.Names=c('x','y')))
plot.new(); plot.window()
plot.new(); plot.window(c(-1,1), c(-1,1))
circle = function(radius,dx=0, dy=0, n=20) list(x = radius*cos(seq(0,1,len=n)*2*pi)+dx, y = radius*sin(seq(0,1,len=n)*2*pi)+dy)
plot(circle(.2))
plot(circle(.2,4))
plot(0:1, col='transparent', box=F, axes=F)
plot(0:1, col='transparent',  axes=F)
plot(0:1, col='transparent',  axes=F, xlab="", ylab="")
y = as.ts(rnorm(100), deltat=0.2)
deltat(y)
y = ts(rnorm(100), deltat=0.2)
y = ts(matrix(rnorm(2*100),,2), deltat=0.2)
plot(y)
outer(time(y), 1:ncol(y))
expand.grid(time(y), 1:ncol(y))
plot(expand.grid(time(y), 1:ncol(y)))
mdl$ny
1 / (mdl$ny + 1)
seq(-1, 1, by = 1 / (mdl$ny + 1))
seq(0, 1, by = 1 / (mdl$ny + 1))
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file6d0f6ce1")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file6d0f6ce1")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/filefb55fb7")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/filefb55fb7")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file4c9eef6f")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file4c9eef6f")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file567987b5")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file567987b5")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file44bca86d")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file44bca86d")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file3dd5af5c")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file3dd5af5c")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file17ebe0bb")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file17ebe0bb")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7eef2141")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7eef2141")
mdl$ne
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file5707382")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file5707382")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file19af5e98")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file19af5e98")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file486b5a54")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file486b5a54")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7ff765f0")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7ff765f0")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file4b45b132")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file4b45b132")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file4c747039")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file4c747039")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7073d565")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7073d565")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file5c9d7632")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file5c9d7632")
skel = mskf.model.skeleton(matrix (rnorm (2*100),,2), 2, 3)
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file305d633d")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file305d633d")
mdl = mskf.model(skel <- mskf.model.skeleton(matrix (rnorm (2*100),,2), 2, 3))
mdl = mskf.model(skel <- mskf.model.skeleton(matrix (rnorm (3*100),,3), 2, 3,x=rnorm(100)))
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file431e5299")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file431e5299")
mdl = mskf.model(skel <- mskf.model.skeleton(matrix (rnorm (3*100),,3), 2, 3,x=matrix(rnorm(2*100),,2)))
paW(mdl)
mdl$nm
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file6248dda0")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file6248dda0")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file1dce65c9")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file1dce65c9")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file597c7e68")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file597c7e68")
diff(1) * c(-1,1)
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7c4f0bbd")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7c4f0bbd")
dy
length(y.locy)
diff(y.locy)[1]/2
diff(y.locy)
y.locy
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file298be50d")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file298be50d")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file1f6acdca")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file1f6acdca")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file1cec98e3")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file1cec98e3")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file71296dea")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file71296dea")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file56ef57b0")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file56ef57b0")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7b661066")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7b661066")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file69bed7d4")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file69bed7d4")
paR(mdl)
maR(mdl)
maK(mdl)
paK(mdl)
warnings()
maH(mdl)
		if(H[j,i,k] != 0) {
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file2b00d51")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file2b00d51")
text(-1, eta.locy, expression(eta))
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file743a4237")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file743a4237")
parse(text="x[2]")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file1cd1647e")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file1cd1647e")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file771c9af9")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file771c9af9")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file77028e86")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file77028e86")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file48db3c74")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file48db3c74")
parse(text = paste("y[",1:mdl$ny,"]",sep=""))
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file315e090a")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file315e090a")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file14a388d8")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file14a388d8")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7c6d277d")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7c6d277d")
paste(paste("y[",1:mdl$ny,"]",sep=""),collapse=",~")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file623bbf5c")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file623bbf5c")
parse(text = paste(paste("y[",1:mdl$ny,"]",sep=""),collapse=", ")
parse(text = paste(paste("y[",1:mdl$ny,"]",sep=""),collapse=", "))
parse(text = paste(paste("y[",1:mdl$ny,"]",sep=""),collapse=","))
sapply(paste(paste("y[",1:mdl$ny,"]",sep=""), parse)
sapply(paste(paste("y[",1:mdl$ny,"]",sep="")), parse)
sapply(paste(paste("y[",1:mdl$ny,"]",sep="")), function(text) parse(text=text))
text(-1, y.locy, sapply(paste(paste("y[",1:mdl$ny,"]",sep="")), function(text) parse(text=text))
parse(text = paste(paste("y[",1:mdl$ny,"]",sep=""),collapse=""))
parse(text = paste(paste("y[",1:mdl$ny,"]",sep=""),collapse=",~"))
parse(text = paste(paste("y[",1:mdl$ny,"]",sep=""),collapse="~"))
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file40906366")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file40906366")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file476ddea7")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file476ddea7")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7e34ca93")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7e34ca93")
text(eta.locx, -1, expression(t))
text(eta.locx, -1.5, expression(t))
text(eta.locx, -1.25, expression(t))
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file3bdfb9a0")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file3bdfb9a0")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file5d13d615")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file5d13d615")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file414c2c70")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file414c2c70")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file6ff98e8d")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file6ff98e8d")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file68fe0469")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file68fe0469")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7cd3bf58")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file7cd3bf58")
paH(mdl) = matrix(c(5,5,6),2)
paH(mdl) = matrix(c(5,5,0,6),2)
paH(mdl)
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file31b76a6e")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file31b76a6e")
deparse(fun)
deparse(fun===maB)
deparse(fun==maB)
all.equal(fun, maB)
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/fileac7542")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/fileac7542")
maW
fun
paW
all.equal(fun, maW)
all.equal(fun, paW)
lty
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/filedc36de4")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/filedc36de4")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file19639acb")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file19639acb")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file5a479272")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file5a479272")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file10dfa8ac")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file10dfa8ac")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file4bbabcdb")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file4bbabcdb")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file50c4f4b4")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file50c4f4b4")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file329d7ed9")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file329d7ed9")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file1f2f285")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file1f2f285")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file750ffac2")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file750ffac2")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file6c181298")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file6c181298")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file206cf099")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file206cf099")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file5027dd70")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file5027dd70")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file693b0d2c")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file693b0d2c")
seq(-.5,1,len=4)
seq(-.05,.1,len=4)
seq(-.5,1,len=4)/10
.Machine$double.eps
.Machine$double.eps/2
.Machine$double.eps/4
.Machine$double.eps/8
.Machine$double.eps/17
seq(-.05,.1,len=4) / .Machine$double.eps
.Machine$double.eps/seq(-.05,.1,len=4)
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file23ddf9ad")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file23ddf9ad")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file4232df40")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file4232df40")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file19df04b4")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//Rtmpldu7m2/file19df04b4")
source("/Users/rgrasma1/Desktop/plot.mskf.model.R")
??maxLik
library(maxLik)
?maxLik
detach(package:maxLik)
?mskf
apropos('mskf')
apropos('sim')
?sim.msar
apropos('doc')
?RweaveLatex
sim.msar
1 %% 3
2 %% 3
3 %% 3
(3-1) %% 3 + 1
(2-1) %% 3 + 1
(1-1) %% 3 + 1
(4-1) %% 3 + 1
class(p)
substitute(p)
deparse(substitute(p))
p
eigen(matrix(c(.7,.4.,.3,.6),2))
eigen(matrix(c(.7,.4,.3,.6),2))
P
print
print(1:10)
ls()
sim.msar()
(function(x){X=x})(x=matrix(c(.7,.3,.6,.4),2))
(function(x){X=x;X})(x=matrix(c(.7,.3,.6,.4),2))
sim.msar(P=matrix(c(.7,.3,.6,.4),2))
plot(100+x/(1+x),0,1000)
curve(100+x/(1+x),0,1000)
curve(100+exp(x)/(1+exp(x)),0,1000)
curve(100+exp(-x)/(1+exp(-x)),0,1000)
curve(100-exp(-x)/(1+exp(-x)),0,1000)
curve(x/(1+x),0,1000)
curve(x//10,0,1000)
curve(x/10,0,1000)
curve(100+x/10,0,1000)
sim.msar(100, H = array(c(.7, .3, 0, .6, .7, 0, .4, .8),c(2,2,3))
head(x)
table(x)
apropos('seq')
sim.msar(100, H = array(c(.7, .3, 0, .6, .7, 0, .4, .8),c(2,2,3)))
plot(sim.msar(100, H = array(c(.7, .3, 0, .6, .7, 0, .4, .8),c(2,2,3)))$y)
plot(sim.msar(1000, H = array(c(.7, .3, 0, .6, .7, 0, .4, .8),c(2,2,3)))$y)
spectrum(sim.msar(1000, H = array(c(.7, .3, 0, .6, .7, 0, .4, .8),c(2,2,3)))$y)
spectrum(sim.msar(1000, H = array(c(.7, .3, 0, .6, .7, 0, .4, .8),c(2,2,3)))$y, span=5)
spectrum(sim.msar(1000, H = array(c(.7, .3, 0, .6, .7, 0, .4, .8),c(2,2,3)))$y, span=5, plot="coh")
spectrum(sim.msar(1000, H = array(c(.7, .3, 0, .6, .7, 0, .4, .8),c(2,2,3)))$y, span=5, plot.type="coh")
spectrum(sim.msar(1000, H = array(c(.7, .3, 0, .6, .7, 0, .4, .8),c(2,2,3)))$y, span=15, plot.type="coh")
spectrum(sim.msar(1000, H = array(c(.7, .3, 0, .6, .7, 0, .4, .8),c(2,2,3)))$y, span=151, plot.type="coh")
spectrum(sim.msar(1000, H = array(c(.7, .3, 0, .6, .7, 0, .4, .8),c(2,2,3)))$y, span=151, plot.type="ph")
library(mskf)
skel = mskf.model.skeleton(matrix (rnorm (3*100),,3), ne=2)
 start(x, 'pac')
 start(mdl, 'pac')
pac(mdl)
start(mdl)[pac(mdl)]
paG(mdl)
simulate.mskf.model <- function(x, nt, ...) {#
	c = mac(x);#
	c[pac(x)] = start(x)[pac(x)];#
	#
	H = maH(x);#
	H[paH(x)] = start(x)[paH(x)];#
	#
	p = map(x);#
	p[pap(x)] = start(x)[pap(x)];#
	#
	G = maG(x);#
	G[paG(x)] = start(x)[paG(x)];#
	#
	a = sim.msar(nt, p = p, H = H, m = c, G = G);#
	a#
}
pac(x)
pac(x)!=0
simulate.mskf.model <- function(x, nt, ...) {#
	c = mac(x);#
	c[pac(x) != 0] = start(x)[pac(x)];#
	#
	H = maH(x);#
	H[paH(x) != 0] = start(x)[paH(x)];#
	#
	p = map(x);#
	p[pap(x) != 0] = start(x)[pap(x)];#
	#
	G = maG(x);#
	G[paG(x) != 0] = start(x)[paG(x)];#
	#
	a = sim.msar(nt, p = p, H = H, m = c, G = G);#
	a#
}
pap(mdl)
map(mdl) = matrix(.5,2,2)
map(mdl)
print(H)
start(x)
start(x)[pap(x)]
pap(x)
as.character(pap(x))
start(x)[as.character(pap(x))]
print(p)
paH(x)
paH(x) != 0
c(paH(x) != 0)
start(x)[na.omit(as.character(paH(x)))]
start(x)[as.character(paH(x))]
na.omit(start(x)[as.character(paH(x))])
dim(c)
print(G)
q
simulate.mskf.model <- function(x, nt, ...) {#
	getStart = function(x, pa) na.omit(start(x)[as.character(pa)]);#
	#
	c = mac(x);#
	c[pac(x) != 0] = getStart(x, pac(x));#
	#
	H = maH(x);#
	H[paH(x) != 0] = getStart(x, paH(x));#
	#
	p = map(x);#
	p[pap(x) != 0] = getStart(x, pap(x));#
	#
	G = maG(x);#
	G[paG(x) != 0] = getStart(x, paG(x));#
	#
	a = sim.msar(nt, p = p, H = H, m = drop(c), G = G);#
	a#
}
simulate(mdl, 100)
nt
?simulate
apropos('seed')
simulate.mskf.model <- function(x, nsim = 1, seed = NA, nt, ...) {#
	getStart = function(x, pa) na.omit(start(x)[as.character(pa)]);#
	#
	c = mac(x);#
	c[pac(x) != 0] = getStart(x, pac(x));#
	#
	H = maH(x);#
	H[paH(x) != 0] = getStart(x, paH(x));#
	#
	p = map(x);#
	p[pap(x) != 0] = getStart(x, pap(x));#
	#
	G = maG(x);#
	G[paG(x) != 0] = getStart(x, paG(x));#
	#
	a = array(NA, dim = c(nt, dim(H)[1], nsim));#
	if (!is.na(seed)) {#
		set.seed(seed);#
	}#
	for (i in 1:nsim) {#
		a[,,i] = sim.msar(nt, p = p, H = H, m = drop(c), G = G);#
	}#
	list(a = a, seed = seed);#
}
simulate.mskf.model <- function(x, nsim = 1, seed = NA, nt, ...) {#
	getStart = function(x, pa) na.omit(start(x)[as.character(pa)]);#
	#
	c = mac(x);#
	c[pac(x) != 0] = getStart(x, pac(x));#
	#
	H = maH(x);#
	H[paH(x) != 0] = getStart(x, paH(x));#
	#
	p = map(x);#
	p[pap(x) != 0] = getStart(x, pap(x));#
	#
	G = maG(x);#
	G[paG(x) != 0] = getStart(x, paG(x));#
	#
	regime = array(NA, dim = c(nt, nsim));#
	if (!is.na(seed)) {#
		set.seed(seed);#
	}#
	a = replicate(nsim, sim.msar(nt, p = p, H = H, m = drop(c), G = G);#
	list(a = a, seed = seed);#
}
simulate.mskf.model <- function(x, nsim = 1, seed = NA, nt, ...) {#
	getStart = function(x, pa) na.omit(start(x)[as.character(pa)]);#
	#
	c = mac(x);#
	c[pac(x) != 0] = getStart(x, pac(x));#
	#
	H = maH(x);#
	H[paH(x) != 0] = getStart(x, paH(x));#
	#
	p = map(x);#
	p[pap(x) != 0] = getStart(x, pap(x));#
	#
	G = maG(x);#
	G[paG(x) != 0] = getStart(x, paG(x));#
	#
	regime = array(NA, dim = c(nt, nsim));#
	if (!is.na(seed)) {#
		set.seed(seed);#
	}#
	a = replicate(nsim, sim.msar(nt, p = p, H = H, m = drop(c), G = G));#
	list(a = a, seed = seed);#
}
simulate(mdl, nt=10)
simulate(mdl, nt=10)[,1]
simulate(mdl, nt=10)$a[,1]
simulate(mdl, 30, nt=10)$a[,1]
simulate(mdl, 30, nt=10)$a[,4]
names(mdl)
skel = mskf.model.skeleton(matrix (rnorm (100),,2), ne=1, nm=2)
skel
mskf.model(skel)
c = array(c(0,3), dim = c(1,2))#
H = array(c(0.5, 0.3), dim = c(1,1,2))#
G = array(c(1, 1), dim = c(1,1,2))#
#
p = matrix(c(0.7, 0.3, 0.2, 0.8), 2, 2)
mskf.model(skel, mac=c, maH=H, maG = G, pap = p)
mdl = mskf.model(skel, mac=c, maH=H, maG = G, pap = p)
drop(c)
m
sim.msar(10, p, H, c, G)
print(c)
c[,, 1]
sim.msar(10, p, H, array(c, c(dim(c)[1],1,dim(c)[2])), G)
sim.msar(100, p, H, array(c, c(dim(c)[1],1,dim(c)[2])), G)
ar(sim.msar(100, p, H, array(c, c(dim(c)[1],1,dim(c)[2])), G)$y)
ar(sim.msar(100000, p, H, array(c, c(dim(c)[1],1,dim(c)[2])), G)$y)
ar(sim.msar(100000, p, H, array(c, c(dim(c)[1],1,dim(c)[2])), G)$y,1)
ar(sim.msar(100000, p, H, array(c, c(dim(c)[1],1,dim(c)[2])), G)$y,order=1)
ar(sim.msar(1000, p, H, array(c, c(dim(c)[1],1,dim(c)[2])), G)$y,order=1)
debug(sim.msar)
print(i)
c[,,x[i]]
c[,,x[i]] + H[,,x[i]] %*% y[i-1,]
H[,,x[i]] %*% y[i-1,]
c[,,x[i]] + H[,,x[i]] %*% y[i-1,] + resid[i,,x[i]]
list(regime = x[-(1:burn.in)], y = as.ts(y[-(1:burn.in), ]))
undebug(sim.msar)
debug(simulate.mskf.model)
a = sim.msar(nt, p = p, H = H, m = c, G = G)
y = array(NA, dim = c(nt, x$ny))
e = matrix(rnorm(nt * x$ny), nt)
for (i in 1:x$nm) {#
        y[a$regime == i, ] = a$y[a$regime == i, , drop = FALSE] %*% #
            t(array(W[, , i], dim(W)[-3])) + e[a$regime == i, #
            , drop = FALSE] %*% sqrtR[, , i]#
        if (!is.null(X) && !is.null(B)) {#
            y[a$regime == i, ] = y[a$regime == i, ] + X %*% t(array(B[, #
                , i], dim(B)[-3]))#
        }#
    }
str(y)
x$nm
for( i in 1:x$nm)
y[a$regime ==i, ] =  a$y[a$regime == i, , drop = FALSE] %*% #
+             t(array(W[, , i], dim(W)[-3])) + e[a$regime == i, #
+             , drop = FALSE] %*% sqrtR[, , i]
for (i in 1:x$nm) {#
+         y[a$regime == i, ] = a$y[a$regime == i, , drop = FALSE] %*% #
+             t(array(W[, , i], dim(W)[-3])) + e[a$regime == i, #
+             , drop = FALSE] %*% sqrtR[, , i] }
for (i in 1:x$nm) {#
        y[a$regime == i, ] = a$y[a$regime == i, , drop = FALSE] %*% #
            t(array(W[, , i], dim(W)[-3])) + e[a$regime == i, #
            , drop = FALSE] %*% sqrtR[, , i]}
a$y[a$regime == i, , drop = FALSE] %*% #
+             t(array(W[, , i], dim(W)[-3])) + e[a$regime == i, #
+             , drop = FALSE] %*% sqrtR[, , i]
a$y[a$regime == i, , drop = FALSE] %*% #
            t(array(W[, , i], dim(W)[-3])) + e[a$regime == i, #
            , drop = FALSE] %*% sqrtR[, , i]
dim(a$y)
head(a$y)
source("/Users/rgrasma1/Dropbox/Documents/Shared/Ellen shared/mskf/R/sim.msar.R")
undebug(simulate.mskf.model)
simulate(mdl, nt=100)[1,]
simulate(mdl, nt=100)[1,1]
simulate(mdl, nt=100)$sims[1,1]
simulate(mdl, nt=100)$sims
simulate(mdl, nt=100)$sims[,1]
mdl = smkf.model(skel)
mdl = mskf.model(skel)
simulate(mdl), nt=100)
simulate(mdl, nt=100)
simulate(mdl, nt=1000)
simulate(mdl, nt=1000)[2,1]
ar(simulate(mdl, nt=1000)$sims[2,1])
simulate(mdl, nt=1000)$sims[2,1]
str(simulate(mdl, nt=1000)$sims[2,1])
ar(simulate(mdl, nt=1000)$sims[2,1][,1])
tmp = simulate(mdl, nt=1000)$sims[2,1]
tmp = simulate(mdl, nt=1000)$sims[,1]$a
str(tmp)
plot(tmp)
ar(tmp)
tmp = simulate(mdl, nt=100)$sims[,1]$a
ar(tmp,order=1)
phi = replicate(1e3, ar(simulate(mdl, nt=100)$sims[,1]$a, order=1))
hist(sapply(phi,coef))
phi[[1]]
phi[1]
head(phi)
phi[2,]
hist(unlist(phi[2,]),100)
mean(unlist(phi[2,]),100)
arima.sim(list (ar=.7), 100)
ar(arima.sim(list (ar=.7), 100))
phi0 = replicate(1e3, ar(arima.sim(list (ar=.7), 100)))
mean(unlist(phi0[2,]),100)
phi0[[1]]
phi0[,1]
phi[,1]
hist(unlist(phi[2,]))
hist(unlist(phi[2,]),40)
hist(unlist(phi0[2,]),40)
ar(arima.sim(list(ar=.7),100), order=1)
ar(arima.sim(list(ar=.7),100), order=1)$ar
phi0 = replicate(1e3, ar(arima.sim(list(ar=.7),100), order=1)$ar)
ar(simulate(mdl, nt=100)[,1]$a, order=1)
ar(simulate(mdl, nt=100)$sims[,1]$a, order=1)
ar(simulate(mdl, nt=100)$sims[,1]$a, order=1)$ar
phi = replicate(1e3, ar(simulate(mdl, nt=100)$sims[,1]$a, order=1)$ar)
hist(phi)
mean(phi)
hist(phi0)
mean(phi0)
t.test(phi,phi0)
ks.test(phi,phi0)
mdl = mskf.model(skel, map = p, mac = c, maH = H, maG = G)
simulate(mdl, nt=40)$sims
simulate(mdl, nt=40)[,1]
simulate(mdl, nt=40)[,1]$y
plot(simulate(mdl, nt=40)[,1]$y)
drop(simulate(mdl, nt=40))
simulate(mdl, nt=40)
ar(simulate(mdl, nt=40)$y)
simulate(mdl, nt=40)$a
ar(simulate(mdl, nt=40)$a)
simulate(mdl, nt=40)$y
spectrum(simulate(mdl, nt=400)$y, span=15, plot.type="coh"))
spectrum(simulate(mdl, nt=400)$y, span=15, plot.type="coh")
spectrum(simulate(mdl, nt=400)$y, span=35, plot.type="coh")
ar(simulate(mdl, nt=400)$y)
mdl$nx
debug(plot.mskf.model)
skel = mskf.model.skeleton(rnorm(100), ne=1, nm=2)
mdl = mskf.model(skel, map=p, mac=c, maH=H, maG=G)
H
maG(mdl)
G
maW(mdl)
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//RtmpX1R155/file787b55d")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//RtmpX1R155/file787b55d")
source("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//RtmpX1R155/file5e93f087")#
unlink("/var/folders/qI/qIqyxy5iGjayyo2CIR8VzU+++TQ/-Tmp-//RtmpX1R155/file5e93f087")
diff(1)
plot(mdl)
sim = simulate(mdl, nt=100)#
y = sim$y;
skel2 = mskf.model.skeleton(y, ne = 1, nm = 2)#
mdl = mskf.model(skel)
skel2
mdl = mskf.model(skel2)
mdl2 = mskf.model(skel2)
start(mdl2, 'paH') = array(c(.7,.7), c(1,1,2))
start(mdl2, 'pac') = array(c(0,0), c(1,1,2))
start(mdl2, 'paK') = array(c(1,1), c(1,1,2))
mskf(mdl)
mdl = mskf.model(skel2, pap = diag(7:8), paK = 5:6, pac=1:2, paH=3:4, upper = 50, lower = -50)
start(mdl2, 'pac') = c(.05, 3)
start(mdl2, 'pac')
start(mdl2, 'pac') = array(c.05,3),c(1,1,2))
start(mdl2, 'pac') = array(c(.05,3),c(1,1,2))
pac
is.array(c(.05, .7))
is.vector(c(.05, .7))
start(mdl, 'pac') = c(.05, .7)
start(mdl, 'paH') = c(.5, .7)
mdl
skel2 = mskf.model.skeleton(y, ne = 1, nm = 2)#
mdl2 = mskf.model(skel2, pap = diag(7:8), paK = 5:6, pac=1:2, paH=3:4, upper = 50, lower = -50)#
start(mdl2, 'pac') = c(.05, 3)#
start(mdl2, 'paH') = c(.51, .22)#
start(mdl2, 'paK') = c(1.5, 2)#
start(mdl2, 'pap') = diag(1,.5)
start(mdl2, 'pap')
start(mdl2, 'pap') = diag(c(1,.5))
mdl2
mskf(mdl2)
# Univariate AR(1) with two regimes#
#
c = array(c(0,3), dim = c(1,2))#
H = array(c(0.5, 0.3), dim = c(1,1,2))#
G = array(c(1, 1), dim = c(1,1,2))#
#
p = matrix(c(0.7, 0.3, 0.2, 0.8), 2, 2)#
#
# specify model#
skel = mskf.model.skeleton(rnorm(100), ne = 1, nm = 2)#
mdl = mskf.model(skel, map = p, maH = H, maG = G)#
#
# simulate from model#
sim = simulate(mdl, nt=100)#
y = sim$y;#
#
## estimate model parameters#
#
# set up model skeleton for simulated data#
skel2 = mskf.model.skeleton(y, ne = 1, nm = 2)#
#
# build model and initialize starting values#
mdl2 = mskf.model(skel2, pap = diag(7:8), paK = 5:6, pac=1:2, paH=3:4, upper = 50, lower = -50)#
start(mdl2, 'pac') = c(.05, 3)#
start(mdl2, 'paH') = c(.51, .22)#
start(mdl2, 'paK') = c(1.5, 2)#
start(mdl2, 'pap') = diag(c(1,.5))#
#
# fit the model#
mskf(mdl)
# Univariate AR(1) with two regimes#
#
c = array(c(0,3), dim = c(1,2))#
H = array(c(0.5, 0.3), dim = c(1,1,2))#
G = array(c(1, 1), dim = c(1,1,2))#
#
p = matrix(c(0.7, 0.3, 0.2, 0.8), 2, 2)#
#
# specify model#
skel = mskf.model.skeleton(rnorm(100), ne = 1, nm = 2)#
mdl = mskf.model(skel, map = p, maH = H, maG = G)#
#
# simulate from model#
sim = simulate(mdl, nt=100)#
y = sim$y;#
#
## estimate model parameters#
#
# set up model skeleton for simulated data#
skel2 = mskf.model.skeleton(y, ne = 1, nm = 2)#
#
# build model and initialize starting values#
mdl2 = mskf.model(skel2, pap = diag(7:8), paK = 5:6, pac=1:2, paH=3:4, upper = 50, lower = -50)#
start(mdl2, 'pac') = c(.05, 3)#
start(mdl2, 'paH') = c(.51, .22)#
start(mdl2, 'paK') = c(1.5, 2)#
start(mdl2, 'pap') = diag(c(1,.5))#
#
# fit the model#
mskf(mdl2)
diag(1.2,4)
m = array(c(10, 10, 10, 10), dim = c(2, 1, 2))#
W = array(rep(c(1, 0.8, 0.6, 0.4), 2), dim = c(4, 1, 2))#
R = array(c(diag(1,4), diag(1.2,4)), dim = c(4,4,2))
R
skel3 = mskf.skeleton(matrix(rnorm(100*4),100), ne = 1, nm = 2)#
mdl3 = mskf.model(skel, map = p, mac = c, maH = H, maG = G, maW = W, maR = R)#
sim = simulate(mdl3)
m = array(c(10, 10, 10, 10), dim = c(2, 1, 2))#
W = array(rep(c(1, 0.8, 0.6, 0.4), 2), dim = c(4, 1, 2))#
R = array(c(diag(1,4), diag(1.2,4)), dim = c(4,4,2))#
#
# simulate from model#
skel3 = mskf.skeleton(matrix(rnorm(100*4),100), ne = 1, nm = 2)#
mdl3 = mskf.model(skel, map = p, mac = c, maH = H, maG = G, maW = W, maR = R)#
sim = simulate(mdl3)
skel3 = mskf.skeleton(matrix(rnorm(100*4),100), ne = 1, nm = 2, ipat=c(W=2,B=2,R=2,H=2,c=2,G=1,K=2,p=2))#
mdl3 = mskf.model(skel, map = p, mac = c, maH = H, maG = G, maW = W, maR = R)#
sim = simulate(mdl3)
skel3 = mskf.model.skeleton(matrix(rnorm(100*4),100), ne = 1, nm = 2, ipat=c(W=2,B=2,R=2,H=2,c=2,G=1,K=2,p=2))#
mdl3 = mskf.model(skel, map = p, mac = c, maH = H, maG = G, maW = W, maR = R)#
sim = simulate(mdl3)
skel3 = mskf.model.skeleton(matrix(rnorm(100*4),100), ne = 1, nm = 2, ipat=c(W=2,B=2,R=2,H=2,c=2,G=1,K=2,p=2))#
#mdl3 = mskf.model(skel, map = p, mac = c, maH = H, maG = G, maW = W, maR = R)#
#sim = simulate(mdl3)
skel$ipat
debug(mskf.model.skeleton)
mskf.model.skeleton
dims[['G']]
on.exit(return(list(dnam=dnam, d=d, nam=nam, const = const, pattr = pattr)))
c
skel3 = mskf.model.skeleton(matrix(rnorm(100*4),100), ne = 1, nm = 2, ipat=c(W=2,B=2,R=2,H=2,c=2,G=1,K=2,p=2))
nam
d
list(1:d[1], 1:d[2], paste('regime', 1:d[3])
)
list(1:d[1], 1:d[2], paste('regime', 1:d[3]))
list(seq_len(d[1]), seq_len(d[2]), paste('regime', 1:d[3]))
dnam = list(seq_len(d[1]), seq_len(d[2]), paste('regime', 1:d[3]))
dnam
source("/Users/rgrasma1/Dropbox/Documents/Shared/Ellen shared/mskf/R/mskf.model.skeleton.R")
skel3 = mskf.skeleton(matrix(rnorm(100*4),100), ne = 1, nm = 2, ipat=c(W=2,B=2,R=2,H=2,c=2,G=1,K=2,p=2))
y = matrix(rnorm(100*4),100) # data place holder#
skel3 = mskf.model.skeleton(y, ne = 1, nm = 2, ipat=c(W=2,B=2,R=2,H=2,c=2,G=1,K=2,p=2))
mskf.model.mskf.skeleton <- function(mskf.skeleton, ..., start=NA, lower=NA, upper=NA)#
{#
    # #
    obj = mskf.skeleton#
    inits = list(...);#
    nmconst = names(obj$const);#
    nmpattr = names(obj$pattern);#
    if (!all(chk <- names(inits) %in% c(nmconst, nmpattr)))#
        warning("arguments ", names(inits)[!chk], " unused");#
    	#
#
    # "attach" elements of x to the current environment#
    for (nme in names(obj)) assign(nme, obj[[nme]]);#
#
    # default values#
    defc = list(#
        maW = diag(max(ny,ne))[1:ny, 1:ne],#
        maB = diag(max(ny,nx))[1:ny, 1:nx],#
        maR = diag(ny),#
        mac = rep(0, ne),#
        maH = diag(0.7, ne),#
        maG = diag(ne),#
        maK = diag(ne),#
        map = diag(1, nm)#
    )#
    maxn = max(unlist(inits[nmpattr]),0) # max of labels used in inits#
    npar = maxn;#
    defp = list(#
        paW = {tmp = matrix(npar+1,ny,ne); tmp[upper.tri(tmp)] = 0; npar<-max(tmp,npar); tmp},#
        paB = {tmp = matrix(npar+1,ny,nx); tmp[upper.tri(tmp)] = 0; npar<-max(tmp,npar); tmp},#
        paR = {tmp = diag(npar+1,ny); npar <- max(tmp,npar); tmp;},#
        pac = {tmp = matrix(npar+1:ne,ne, 1); npar<-max(tmp,npar); tmp},#
        paH = {tmp = diag(npar+1:ne,ne); npar<-max(tmp,npar); tmp},#
        paG = {tmp = diag(npar+1:ne,ne); npar<-max(tmp,npar); tmp},#
        paK = {tmp = diag(npar+1,ne); npar<-max(tmp,npar); tmp},#
        pap = {tmp = matrix(npar+1,nm,nm); npar<-max(tmp,npar); tmp}#
     )#
     npar = npar - maxn + length(unique(unlist(inits[nmpattr])));#
        #
    #
    # vectors for starting values, lower and upperbounds#
    theta <- lobo <- upbo <- c()#
    #
    # set values of skeleton matrices#
    for(nme in nmconst){#
        obj$const[[nme]][] = defc[[nme]];#
        if(nme %in% names(inits))#
            obj$const[[nme]][] = inits[[nme]];#
    }#
    for(nme in nmpattr){#
        if(length(obj$pattern[[nme]][]) %% length(defp[[nme]]) !=0)#
            stop("this shouldn't happen, you discovered a bug (", nme,")")#
        else #
            obj$pattern[[nme]][] = defp[[nme]]#
        if(nme %in% names(inits))#
            if(length(obj$pattern[[nme]][]) %% length(inits[[nme]]) !=0)#
                stop("length of specification of ", nme, " is not a multiple of this model matrix")#
            else#
                obj$pattern[[nme]][] = inits[[nme]]#
    }#
#
    # create named starting parameters vector theta#
    theta.nms = na.omit(unique(unlist(obj$pattern)))#
    theta.nms = theta.nms[as.character(theta.nms)!="0"]#
    npar = length(theta.nms)#
    theta = rep(if (missing(start)) 1/npar else start, len = npar) #
    names(theta) = theta.nms#
    # check provided starting values and set corresponding elements of theta to values provided#
    if (!missing(start) && is.null(names(start))) {#
    	warning("start should be a named vector to initialize the estimated parameters");#
    	names(start) = 1:length(start); # default names#
    }#
    if(!all(chk <- names(start) %in% theta.nms))#
        warning("start value(s) named ", names(start)[!chk], " not used")#
    theta[names(start)[chk]] = start[chk] #
#
    # construct lower and upper bounds similarly (treat variance parameters special)#
    lobo = rep(if (missing(lower)) -10 else lower, len = npar)#
    names(lobo) = theta.nms#
    diagR = rep(diag(ny)>0,nm);#
    diagK = rep(diag(ne)>0,nm);#
    varpars = na.omit(unique(c(obj$pattern$paR[diagR], obj$pattern$paK[diagK])))#
    varpars = varpars[as.character(varpars)!="0"]#
    lobo[as.character(varpars)] = sqrt(.Machine$double.eps) # small number away from zero#
    if(!all(chk <- names(lower) %in% theta.nms))#
        warning("lower bound(s) named ", names(lower)[!chk], " not used")#
    lobo[names(lower)[chk]] = lower[chk] #
    #
    upbo = rep(if (missing(upper)) 10 else upper, len = npar)#
    names(upbo) = theta.nms#
    if(!all(chk <- names(upper) %in% theta.nms))#
        warning("upper bound(s) named ", names(upper)[!chk], " not used")#
    upbo[names(upper)[chk]] = upper[chk] #
#
    #
    # initial state and its covariance matrix#
    a0 = rep(0, ne)           # LET OP: DIT MOET JE EIGENLIJK VOOR ALLE REGIMES EEN KEER OPGEVEN#
    ##a0 = array(a0, c(ne,  1, nm))   # doen dan dus maar? lijkt een probleem te veroorzaken#
    P0 = diag(100, ne)        # IDEM#
    ##P0 = array(P0, c(ne, ne, nm))   # ook maar doen dan?? lijkt een probleem te veroorzaken#
#
    obj = c(obj, list(theta = theta, lobo = lobo, upbo = upbo, a0 = a0, P0 = P0));#
    class(obj) = 'mskf.model'#
    obj#
}
mdl3 = mskf.model(skel, map = p, mac = c, maH = H, maG = G, maW = W, maR = R)
nmconst
names(obj$const)
debug(mskf.model)
maxn
length(unique(unlist(inits[nmpattr]])))
length(unique(unlist(inits[nmpattr])))
npar
defc
obj$const[[nmconst[1]]] = defc[[nmconst[1]]]
obj$const[[nmconst[1]]]
obj$const[[nme]][] = defc[[nme]]
obj$const[[nme]][]
names(inits)
if (nme %in% names(inits)) obj$const[[nme]]
length(obj$pattern[[nme]])
length(obj$pattern[[nme]]) %% length(defp[[nme]])
nme
mdl3 = mskf.model.mskf.model.skeleton(skel3, map = p, mac = c, maH = H, maG = G, maW = W, maR = R)
mdl3 = mskf.model.mskf.skeleton(skel3, map = p, mac = c, maH = H, maG = G, maW = W, maR = R)
?browser
mskf.model.mskf.skeleton <- function(mskf.skeleton, ..., start=NA, lower=NA, upper=NA)#
{#
    # #
    obj = mskf.skeleton#
    inits = list(...);#
    nmconst = names(obj$const);#
    nmpattr = names(obj$pattern);#
    if (!all(chk <- names(inits) %in% c(nmconst, nmpattr)))#
        warning("arguments ", names(inits)[!chk], " unused");#
    	#
#
    # "attach" elements of x to the current environment#
    for (nme in names(obj)) assign(nme, obj[[nme]]);#
#
    # default values#
    defc = list(#
        maW = diag(max(ny,ne))[1:ny, 1:ne],#
        maB = diag(max(ny,nx))[1:ny, 1:nx],#
        maR = diag(ny),#
        mac = rep(0, ne),#
        maH = diag(0.7, ne),#
        maG = diag(ne),#
        maK = diag(ne),#
        map = diag(1, nm)#
    )#
    maxn = max(unlist(inits[nmpattr]),0) # max of labels used in inits#
    npar = maxn;#
    defp = list(#
        paW = {tmp = matrix(npar+1,ny,ne); tmp[upper.tri(tmp)] = 0; npar<-max(tmp,npar); tmp},#
        paB = {tmp = matrix(npar+1,ny,nx); tmp[upper.tri(tmp)] = 0; npar<-max(tmp,npar); tmp},#
        paR = {tmp = diag(npar+1,ny); npar <- max(tmp,npar); tmp;},#
        pac = {tmp = matrix(npar+1:ne,ne, 1); npar<-max(tmp,npar); tmp},#
        paH = {tmp = diag(npar+1:ne,ne); npar<-max(tmp,npar); tmp},#
        paG = {tmp = diag(npar+1:ne,ne); npar<-max(tmp,npar); tmp},#
        paK = {tmp = diag(npar+1,ne); npar<-max(tmp,npar); tmp},#
        pap = {tmp = matrix(npar+1,nm,nm); npar<-max(tmp,npar); tmp}#
     )#
     npar = npar - maxn + length(unique(unlist(inits[nmpattr])));#
        #
    #
    # vectors for starting values, lower and upperbounds#
    theta <- lobo <- upbo <- c()#
    #
    # set values of skeleton matrices#
    for(nme in nmconst){#
        obj$const[[nme]][] = defc[[nme]];#
        if(nme %in% names(inits))#
            obj$const[[nme]][] = inits[[nme]];#
    }#
    for(nme in nmpattr){#
        if(length(obj$pattern[[nme]][]) %% length(defp[[nme]]) !=0)#
            stop("this shouldn't happen, you discovered a bug (", nme,")")#
        else #
            obj$pattern[[nme]][] = defp[[nme]];#
        browser()#
        if(nme %in% names(inits))#
            if(length(obj$pattern[[nme]][]) %% length(inits[[nme]]) !=0)#
                stop("length of specification of ", nme, " is not a multiple of this model matrix")#
            else#
                obj$pattern[[nme]][] = inits[[nme]]#
    }#
#
    # create named starting parameters vector theta#
    theta.nms = na.omit(unique(unlist(obj$pattern)))#
    theta.nms = theta.nms[as.character(theta.nms)!="0"]#
    npar = length(theta.nms)#
    theta = rep(if (missing(start)) 1/npar else start, len = npar) #
    names(theta) = theta.nms#
    # check provided starting values and set corresponding elements of theta to values provided#
    if (!missing(start) && is.null(names(start))) {#
    	warning("start should be a named vector to initialize the estimated parameters");#
    	names(start) = 1:length(start); # default names#
    }#
    if(!all(chk <- names(start) %in% theta.nms))#
        warning("start value(s) named ", names(start)[!chk], " not used")#
    theta[names(start)[chk]] = start[chk] #
#
    # construct lower and upper bounds similarly (treat variance parameters special)#
    lobo = rep(if (missing(lower)) -10 else lower, len = npar)#
    names(lobo) = theta.nms#
    diagR = rep(diag(ny)>0,nm);#
    diagK = rep(diag(ne)>0,nm);#
    varpars = na.omit(unique(c(obj$pattern$paR[diagR], obj$pattern$paK[diagK])))#
    varpars = varpars[as.character(varpars)!="0"]#
    lobo[as.character(varpars)] = sqrt(.Machine$double.eps) # small number away from zero#
    if(!all(chk <- names(lower) %in% theta.nms))#
        warning("lower bound(s) named ", names(lower)[!chk], " not used")#
    lobo[names(lower)[chk]] = lower[chk] #
    #
    upbo = rep(if (missing(upper)) 10 else upper, len = npar)#
    names(upbo) = theta.nms#
    if(!all(chk <- names(upper) %in% theta.nms))#
        warning("upper bound(s) named ", names(upper)[!chk], " not used")#
    upbo[names(upper)[chk]] = upper[chk] #
#
    #
    # initial state and its covariance matrix#
    a0 = rep(0, ne)           # LET OP: DIT MOET JE EIGENLIJK VOOR ALLE REGIMES EEN KEER OPGEVEN#
    ##a0 = array(a0, c(ne,  1, nm))   # doen dan dus maar? lijkt een probleem te veroorzaken#
    P0 = diag(100, ne)        # IDEM#
    ##P0 = array(P0, c(ne, ne, nm))   # ook maar doen dan?? lijkt een probleem te veroorzaken#
#
    obj = c(obj, list(theta = theta, lobo = lobo, upbo = upbo, a0 = a0, P0 = P0));#
    class(obj) = 'mskf.model'#
    obj#
}
obj$pattern[[nme]]
obj$pattern[[nme]][]
length(obj$pattern[[nme]][])
length(obj$pattern[[nme]][]) %% length(defp[[nme]])
length(obj$pattern[[nme]][]) %% length(defp[[nme]]) != 0
names(obj$pattern)
nmpattr
names(defp)
sapply(defp, length)
sapply(obj$pattern, length)
0 %% 0
undebug(mskf.model)
source("/Users/rgrasma1/Dropbox/Documents/Shared/Ellen shared/mskf/R/mskf.model.mskf.skeleton.R")
mdl3 = mskf.model(skel3, map = p, mac = c, maH = H, maG = G, maW = W, maR = R)
y = matrix(rnorm(100*4),100) # data place holder#
x = rep(1, 100)#
skel3 = mskf.model.skeleton(y, ne = 1, nm = 2, x=x, ipat=c(W=2,B=2,R=2,H=2,c=2,G=1,K=2,p=2))#
mdl3 = mskf.model(skel3, map = p, mac = c, maH = H, maG = G, maW = W, maR = R)
source("/Users/rgrasma1/Dropbox/Documents/Shared/Ellen shared/mskf/R/plot.mskf.model.R")
plot(mdl3)
mdl3 = mskf.model(skel3, map = p, mac = c, maH = H, maB=m, maG = G, maW = W, maR = R)
simulate(mdl)
plot(simulate(mdl)$a)
plot(simulate(mdl)$y)
plot(simulate(mdl3)$y)
simulate(mdl3)
B = array(c(10), dim = c(1, 1, 2))#
W = array(rep(c(1, 0.8, 0.6, 0.4), 2), dim = c(4, 1, 2))#
R = array(c(diag(1,4), diag(1.2,4)), dim = c(4,4,2))#
#
# simulate from model#
y = matrix(rnorm(100*4),100) # data place holder#
x = rep(1, 100)#
skel3 = mskf.model.skeleton(y, ne = 1, nm = 2, x=x, ipat=c(W=2,B=2,R=2,H=2,c=2,G=1,K=2,p=2))#
mdl3 = mskf.model(skel3, map = p, mac = c, maH = H, maB=m, maG = G, maW = W, maR = R)#
sim = simulate(mdl3)
mdl3
mdl3$x
maB(mdl3)
maB(mdl3)[,,1]
array(maB(mdl3)[,,1], c(4,1))
t(array(maB(mdl3)[,,1], c(4,1)))
mdl$x %*% t(array(maB(mdl3)[,,1], c(4,1)))
mdl$x # %*% t(array(maB(mdl3)[,,1], c(4,1)))
x
mdl$x
mdl3$x # %*% t(array(maB(mdl3)[,,1], c(4,1)))
mdl3$x  %*% t(array(maB(mdl3)[,,1], c(4,1)))
traceback()
dim(maB(mdl3))
dim(maB(mdl3))[-1]
array(maB(mdl3)[,,1], dim(maB(mdl3))[-1])
array(maB(mdl3)[,,1], dim(maB(mdl3))[-3])
head(y)
head(y,9)
head(y[a$regime == 1,,],9)
head(y[a$regime == 1,],9)
head(y[a$regime == 1,],9) + X %*% t(array(B[,,i],dim(B)[-3]))
X %*% t(array(B[,,i],dim(B)[-3]))
Q
sim = simulate(mdl3)
sim
plot(sim$y)
mdl4 = mskf.model(skel4, paW = rep(0:3,2), paB = diag(4:7), paR = c(diag(8:11),diag(12:15)),#
	paH = 16:17, pac = c(0,18),paK = 19:20, pap = diag(21:22))
skel4 = model.skeleton(y, ne = 1, nm = 2, x=x, ipat=c(W=2,B=2,R=2,H=2,c=2,G=1,K=2,p=2))#
mdl4 = mskf.model(skel4, paW = rep(0:3,2), paB = diag(4:7), paR = c(diag(8:11),diag(12:15)),#
	paH = 16:17, pac = c(0,18),paK = 19:20, pap = diag(21:22))
skel4 = mskf.model.skeleton(y, ne = 1, nm = 2, x=x, ipat=c(W=2,B=2,R=2,H=2,c=2,G=1,K=2,p=2))#
mdl4 = mskf.model(skel4, paW = rep(0:3,2), paB = diag(4:7), paR = c(diag(8:11),diag(12:15)),#
	paH = 16:17, pac = c(0,18),paK = 19:20, pap = diag(21:22))
maB(skel4)
mdl4 = mskf.model(skel4, paW = rep(0:3,2), paB = diag(4:7), paR = c(8:11,12:15),#
	paH = 16:17, pac = c(0,18),paK = 19:20, pap = diag(21:22))
mdl4 = mskf.model(skel4, paW = rep(0:3,2), paB = 4:7, paR = c(diag(8:11),diag(12:15)),#
	paH = 16:17, pac = c(0,18),paK = 19:20, pap = diag(21:22))
start(mdl4, 'paW') = c(.8, .6, .4)#
start(mdl4, 'paB') = rep(10, 4)#
start(mdl4, 'paR') = rep(1, 8)#
start(mdl4, 'paH') = c(.5, .2)#
start(mdl4, 'pac') = 3#
start(mdl4, 'paK') = c(1,1)#
start(mdl4, 'pap') = c(.8, 1.4)
source("/Users/rgrasma1/Dropbox/Documents/Shared/Ellen shared/mskf/R/mskf-model-utilities.R")
start(mdl4, 'paW') #= c(.8, .6, .4)
start(mdl4, 'paW') = c(.8, .6, .4)
start(mdl4, 'paW')[] = c(.8, .6, .4)
start(mdl4, 'paW')[] = c(0,.8, .6, .4)
start(mdl4, 'paW')[] = c(0,.8, .6, .4)#
start(mdl4, 'paB')[] = rep(10, 4)#
start(mdl4, 'paR')[] = rep(1, 8)#
start(mdl4, 'paH')[] = c(.5, .2)#
start(mdl4, 'pac')[] = 3#
start(mdl4, 'paK')[] = c(1,1)#
start(mdl4, 'pap')[] = c(.8, 1.4)
start(mdl4, 'pap')
start(mdl4, 'pap')[]
mdl4
mskf(mdl4)
fit = .Last.value
summary(fit)
t(fit$par)
fit$par[as.charachter(paH(mdl4))]
fit$par[as.character(paH(mdl4))]
fit$par[as.character(pac(mdl4))]
fit$par[as.character(paG(mdl4))]
fit$par[as.character(paR(mdl4))]
y
fit$par
unclass(na.omit(fit$par[as.character(paR(mdl4))]))
na.omit(fit$par[as.character(paR(mdl4))])
na.omit(fit$par[as.character(paK(mdl4))])
na.omit(fit$par[as.character(pac(mdl4))])
na.omit(fit$par[as.character(pap(mdl4))])
